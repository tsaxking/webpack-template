# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will install Deno then run `deno lint` and `deno test`.
# For more information see: https://github.com/denoland/setup-deno

name: Checks

on:
    push:
        branches: ['main']
    pull_request:
        branches: ['main']

permissions:
    contents: read

jobs:
    test:
        runs-on: ubuntu-latest

        steps:
            - name: Retrieve git dependencies
              uses: actions/checkout@v3
              with:
                  token: ${{ secrets.GH_TOKEN }}

            - name: Setup Deno
              # uses: denoland/setup-deno@v1
              uses: denoland/setup-deno@61fe2df320078202e33d7d5ad347e7dcfa0e8f31 # v1.1.2
              with:
                  deno-version: v1.x

            # Uncomment this step to verify the use of 'deno fmt' on each commit.
            # - name: Verify formatting
            #   run: deno fmt --check

            - name: Setup Node.js
              uses: actions/setup-node@v2
              with:
                  node-version: '15'

            - name: Install local dependencies
              run: |
                npm i --save-dev prettier-plugin-svelte prettier @typescript-eslint/parser @typescript-eslint/eslint-plugin@5.33.0 eslint typescript prettier-plugin-svelte svelte
                
                
                
            - name: Install global dependencies
              run: |
                npm i -g eslint prettier svelte


            - name: Run Formatter, Linter, then Checks
              run: sh ./scripts/fmt-lint-check.sh

            - name: Push results
              run: |
                git config --global user.name "github-actions[bot]"
                git config --global user.email "github-actions[bot]@users.noreply.github.com"

                echo "Adding changes..."
                git add .

                echo "Committing changes..."
                git commit -m "AUTOMATED: Format, lint, and check"

                echo "Pushing changes..."
                git push

            - name: Push to deliver
              run: |
                echo "testing if on branch 'main'"
                if [ "$(git rev-parse --abbrev-ref HEAD)" != "main" ]; then
                  echo "not on branch 'main', exiting"
                  exit 0
                fi

                echo "Good, we're on main. Pushing to deliver..."
                echo "Deleting old deliver branch"
                git branch -D deliver || true
                git push origin --delete deliver || true

                echo "Creating new deliver branch"
                git checkout --orphan deliver
                git reset --hard
                git commit --allow-empty -m "Initializing deliver branch"

                git merge main --strategy-option=theirs --allow-unrelated-histories -m "Merging main into gh-pages"
                git add .
                git commit -m "Merging main into deliver"
                git push origin deliver